# 101 Hack 51
# Small Cubes Problem
from math import floor,inf
from time import time
startTime = time()

N,M,K = [int(x) for x in input().split()]
P,Q = [int(x) for x in input().split()]
totalUnitCubes = 0


cubeBlanks = []
initialBigBoyRange = [0,0,inf,inf,0]
bigBoyEstimate = 1

for i in range(N):
    ai,bi,Ai,Bi = [int(x) for x in input().split()]
    totalUnitCubes += (Ai-ai+1)*(Bi-bi+1)
    cubeBlanks.append([ai,bi,Ai,Bi])
    initialBigBoyRange[0] = max(initialBigBoyRange[0],ai)
    initialBigBoyRange[1] = max(initialBigBoyRange[1],bi)
    initialBigBoyRange[2] = min(initialBigBoyRange[2],Ai)
    initialBigBoyRange[3] = min(initialBigBoyRange[3],Bi)
    initialBigBoyRange[4] += 1
    bigBoyEstimate = max(bigBoyEstimate,min(1+initialBigBoyRange[2]-initialBigBoyRange[0],\
                                            1+initialBigBoyRange[3]-initialBigBoyRange[1],\
                                            initialBigBoyRange[4]))


for newHeight in range(1,len(cubeBlanks)):
    initialBigBoyRange = [0,0,inf,inf,0]
    if time()-startTime > 9.5:
        break
    for i in range(newHeight,N):
        ai,bi,Ai,Bi = cubeBlanks[i]
        initialBigBoyRange[0] = max(initialBigBoyRange[0],ai)
        initialBigBoyRange[1] = max(initialBigBoyRange[1],bi)
        initialBigBoyRange[2] = min(initialBigBoyRange[2],Ai)
        initialBigBoyRange[3] = min(initialBigBoyRange[3],Bi)
        initialBigBoyRange[4] += 1
        L = 1+initialBigBoyRange[2]-initialBigBoyRange[0]
        W = 1+initialBigBoyRange[3]-initialBigBoyRange[1]
        H = initialBigBoyRange[4]
        if min(L,W) <= bigBoyEstimate:
            break
        bigBoyEstimate = max(bigBoyEstimate,min(L,W,H))


bestScore = 0
for bigBoyLength in range(1,min(bigBoyEstimate,floor(totalUnitCubes**(1/3)),N,M,K)+1):
    score = P*bigBoyLength + Q*(totalUnitCubes-(bigBoyLength**3)+1)
    bestScore = max(bestScore,score)

print(bestScore)
